import { useEffect, useContext, useState } from "react";
import { SocketContext } from "../../../../lib/socketContext"

// Functions
import getGameItems from "./getGameItems";
import endGame from "./endGame";

// Game Data
import data from "./gameData";

export default function testGame(props){

    const socket = useContext(SocketContext);
    const [gameItems, setGameItems] = useState([]);
    const [maxGames, setMaxGames] = useState(3);

    const [playerChoice, setPlayerChoice] = useState('-');
    const [opponentChoice, setOpponentChoice] = useState('paper');
    const [opponentChoicePlaceholder, setOpponentChoicePlaceholder] = useState('-');

    const [playerScore, setPlayerScore] = useState(0);
    const [opponentScore, setOpponentScore] = useState(0);
    const [playerScoreGames, setPlayerScoreGames] = useState(0);
    const [opponentScoreGames, setOpponentScoreGames] = useState(0);

    // timer
    const [maxTime, setMaxTime] = useState(5);
    const [timerGo, setTimerGo] = useState(true);
    const [check, setCheck] = useState(0);
    const [timer, setTimer] = useState(0);
    const [placeholderPosition, setPlaceholderPosition] = useState('bottom-[20px]');
    const [placeholderOpacity, setPlaceholderOpacity] = useState('opacity-100');

    function selectGameItem(e){
        let slug = e.currentTarget.getAttribute("data-slug");
        setGameItems(getGameItems(data, selectGameItem, slug));
        setPlayerChoice(slug);

        let playerAction = {};
        playerAction.room = props.roomName;
        playerAction.action = slug;
        socket.emit('player_action_server', playerAction);
    }

    function newGameStart(){

        console.log('start2');

        setCheck(0);
        setTimer(0);

        setPlayerScore(0);
        setOpponentScore(0);

        setMaxTime(5);
        setTimerGo(true);

        setPlaceholderPosition('bottom-[20px]');

        setPlayerChoice('-');
        setGameItems(getGameItems(data, selectGameItem));
    }

    function newGame(){
        socket.emit('new_game_server', props.roomName);
    }

    function endGameSocket(){
        socket.emit('end_game_server', props.roomName);
    }

    function endGameAction(){

        console.log('endGameAction');

        const result = endGame(data, playerChoice, opponentChoice);
        setOpponentChoicePlaceholder(opponentChoice);

        if (result.result != 'tie'){
            
            let playerScoreNew = playerScore;
            let opponentScoreNew = opponentScore;

            if (result.result == 'win'){
                console.log('you won!');
                playerScoreNew++;
                setPlayerScore(playerScoreNew);

            } else {
                console.log('you lost!');
                opponentScoreNew++;
                setOpponentScore(opponentScoreNew);
            }

            if (playerScoreNew > maxGames - 1){
                alert('You win!');
                setPlayerScoreGames(playerScoreGames + 1);
                newGame();
            }

            if (opponentScoreNew > maxGames - 1){
                alert('You lose!');
                setOpponentScoreGames(opponentScoreGames + 1);
                newGame();
            }

        }

    }
    
    useEffect(function(){

        socket.on('player_action_client', function(data){
            setOpponentChoice(data.action);
        })

        socket.on('new_game_client', function(data){
            newGameStart();
        });

        socket.on('end_game_client', function(data){
            console.log('end game client');
            endGameAction();
        });

    }, [socket]);

    useEffect(function(){

        setGameItems(getGameItems(data, selectGameItem));

    }, []);


    return <div>

                <div className="absolute top-10 right-0 left-0 text-center flex justify-center items-center mb-20">
                    <p>Room name: {props.roomName}</p>
                </div>

                <div className="absolute top-10 right-10 flex justify-evenly items-center mb-20">

                    <div className="text-center">
                        <p>Your Score</p>
                        <p>Round : {playerScore}</p>
                        <p>Games : {playerScoreGames}</p>
                    </div>

                    <div className="text-center ml-8">
                        <p>Opponent Score</p>
                        <p>Round: {opponentScore}</p>
                        <p>Games: {opponentScoreGames}</p>
                    </div>

                </div>

                <div className="flex justify-center items-center mb-12">
                    <h2 className="text-4xl">{maxTime}</h2>
                </div>

                <div className="flex justify-center items-center">
                    {gameItems}
                </div>

                <div className={`${placeholderPosition} h-[200px] relative transition-all ease-in-out transform duration-300`}>
                    <div className={`centerAbsolute z-10 placeholder h-[120px] w-[120px] rounded-full bg-white transition-opacity ease-in-out duration-300 ${placeholderOpacity}`}>
                    </div>
                    <img className="centerAbsolute" src="/rpsls/rock.png" width={120} height={120} />
                </div>

                <div className="flex justify-center items-center mt-20 flex-col">
                    <p>{playerChoice} VS {opponentChoicePlaceholder}</p>
                    <p>You Win!</p>
                </div>

                <div className="flex justify-evenly items-center mt-20">
                    <button onClick={newGame}>New Game</button>
                    <button onClick={endGameSocket}>End Game</button>
                </div>

            </div>
}